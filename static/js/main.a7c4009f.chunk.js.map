{"version":3,"sources":["Die.js","RollDice.js","App.js","serviceWorker.js","index.js"],"names":["Die","react_default","a","createElement","className","concat","this","props","face","rolling","Component","RollDice","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","die1","die2","roll","bind","assertThisInitialized","_this2","newDie1","sides","Math","floor","random","length","newDie2","setState","setTimeout","src_Die_0","onClick","disabled","defaultProps","App","src_RollDice_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SASeA,0LAJP,OAAOC,EAAAC,EAAAC,cAAA,KAAGC,UAAS,mBAAAC,OAAqBC,KAAKC,MAAMC,KAAhC,KAAAH,OAAwCC,KAAKC,MAAME,QAAU,UAAY,aAFlFC,cCCZC,qBAIF,SAAAA,EAAYJ,GAAM,IAAAK,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAAK,IACdC,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAX,KAAMC,KACDW,MAAQ,CACTC,KAAM,MACNC,KAAM,MACNX,SAAS,GAEbG,EAAKS,KAAOT,EAAKS,KAAKC,KAAVT,OAAAU,EAAA,EAAAV,CAAAD,IAPEA,sEASZ,IAAAY,EAAAlB,KACImB,EAAUnB,KAAKC,MAAMmB,MAAMC,KAAKC,MAAMD,KAAKE,SAAWvB,KAAKC,MAAMmB,MAAMI,SACvEC,EAAUzB,KAAKC,MAAMmB,MAAMC,KAAKC,MAAMD,KAAKE,SAAWvB,KAAKC,MAAMmB,MAAMI,SAE7ExB,KAAK0B,SAAS,CAACb,KAAMM,EAASL,KAAMW,EAAStB,SAAS,IAEtDwB,WAAW,WACPT,EAAKQ,SAAS,CAACvB,SAAQ,KACzB,sCAGF,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAC+B,EAAD,CAAK1B,KAAMF,KAAKY,MAAMC,KAAMV,QAASH,KAAKY,MAAMT,UAChDR,EAAAC,EAAAC,cAAC+B,EAAD,CAAK1B,KAAMF,KAAKY,MAAME,KAAMX,QAASH,KAAKY,MAAMT,WAEpDR,EAAAC,EAAAC,cAAA,UAAQgC,QAAS7B,KAAKe,KAAMe,SAAU9B,KAAKY,MAAMT,SAAUH,KAAKY,MAAMT,QAAU,aAAe,qBA9BxFC,cAAjBC,EACK0B,aAAe,CAClBX,MAAO,CAAC,MAAO,MAAO,QAAS,OAAQ,OAAQ,QAkCxCf,cC5BA2B,MARf,WACE,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a7c4009f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Die.css'\n\nclass Die extends Component{\n    render(){\n        return <i className={`Die fas fa-dice-${this.props.face} ${this.props.rolling ? 'shaking' : '' }`}></i>\n    }\n}\n\nexport default Die;","import React, { Component } from 'react'\nimport Die from './Die';\nimport './RollDice.css'\n\nclass RollDice extends Component{\n    static defaultProps = {\n        sides: [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    };\n    constructor(props){\n        super(props);\n        this.state = {\n            die1: \"one\",\n            die2: \"one\",\n            rolling: false\n        };\n        this.roll = this.roll.bind(this);\n    }\n    roll(){\n        const newDie1 = this.props.sides[Math.floor(Math.random() * this.props.sides.length)];\n        const newDie2 = this.props.sides[Math.floor(Math.random() * this.props.sides.length)];\n\n        this.setState({die1: newDie1, die2: newDie2, rolling: true});\n\n        setTimeout(() => {\n            this.setState({rolling:false});\n        },1000);\n    }\n    render(){\n        return(\n            <div className=\"RollDice\">\n                <div className=\"RollDice-container\">\n                    <Die face={this.state.die1} rolling={this.state.rolling} />\n                    <Die face={this.state.die2} rolling={this.state.rolling} />\n                </div>\n                <button onClick={this.roll} disabled={this.state.rolling}>{this.state.rolling ? 'Rolling...' : 'Roll Dice'}</button>\n            </div>\n        );\n    }\n}\n\nexport default RollDice;","import React from 'react';\nimport RollDice from './RollDice'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RollDice />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}